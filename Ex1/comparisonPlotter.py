import os
import numpy as np
import matplotlib.pyplot as plt

ORDER_COLORS = {1: 'blue', 3: 'red', 10: 'purple'}
DATASET_SCATTER_COLORS = {'A': 'orange', 'B': 'green'}

def comparisonFileReader(filepath):
    """Read comparison output generated by exPointFive."""
    data_x, data_a, data_b = [], [], []
    methods = {}
    orders = []
    current_method = None
    prediction_mapping = []

    with open(filepath, 'r') as f:
        for raw_line in f:
            line = raw_line.strip()
            if not line:
                continue

            if line.startswith('#'):
                if line.startswith('# Method:'):
                    current_method = line.split(':', 1)[1].strip()
                    methods[current_method] = {
                        'params': {'A': {}, 'B': {}},
                        'predictions': {'A': {}, 'B': {}},
                        'x_pred': []
                    }
                    prediction_mapping = []
                elif line.startswith('# Order') and current_method is not None:
                    header, values_part = line.split(':', 1)
                    header_tokens = header.split()
                    if len(header_tokens) < 4:
                        continue
                    order = int(header_tokens[2])
                    dataset_label = header_tokens[3]
                    values_str = values_part.strip()
                    values = [float(x) for x in values_str.split()] if values_str else []
                    methods[current_method]['params'][dataset_label][order] = values
                    if order not in orders:
                        orders.append(order)
                else:
                    continue
            else:
                tokens = line.split()
                if not tokens:
                    continue
                if tokens[0] == 'x':
                    continue
                if tokens[0] == 'x_pred':
                    if current_method is None:
                        continue
                    prediction_mapping = []
                    for token in tokens[1:]:
                        if '_' not in token:
                            continue
                        fit_part, dataset_label = token.split('_')
                        order = int(fit_part.replace('fit', ''))
                        prediction_mapping.append((dataset_label, order))
                        if order not in orders:
                            orders.append(order)
                        if order not in methods[current_method]['predictions'][dataset_label]:
                            methods[current_method]['predictions'][dataset_label][order] = []
                    methods[current_method]['x_pred'] = []
                    continue

                values = [float(x) for x in tokens]
                if current_method is None:
                    if len(values) >= 3:
                        data_x.append(values[0])
                        data_a.append(values[1])
                        data_b.append(values[2])
                else:
                    if not prediction_mapping:
                        continue
                    methods[current_method]['x_pred'].append(values[0])
                    for (dataset_label, order), value in zip(prediction_mapping, values[1:]):
                        methods[current_method]['predictions'][dataset_label][order].append(value)

    return {
        'data': {
            'x': np.array(data_x),
            'datapointsA': np.array(data_a),
            'datapointsB': np.array(data_b)
        },
        'methods': methods,
        'orders': sorted(orders)
    }


def _plot_comparison_fit(ax, x_train, y_train, method_data, orders, dataset_label, method_name,
                         x_bounds, y_bounds):
    ax.scatter(x_train, y_train, color=DATASET_SCATTER_COLORS.get(dataset_label, 'gray'),
               alpha=0.7, s=45, label=f'Dataset {dataset_label}')

    x_pred = np.array(method_data['x_pred'])
    for order in orders:
        preds_for_dataset = method_data['predictions'][dataset_label]
        if order not in preds_for_dataset:
            continue
        color = ORDER_COLORS.get(order, plt.cm.tab10(order % 10))
        y_pred = np.array(preds_for_dataset[order])
        ax.plot(x_pred, y_pred, color=color, linewidth=2, label=f'Order {order}')

    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title(f'{method_name} • Dataset {dataset_label}')
    ax.grid(True, alpha=0.3)
    if x_bounds is not None:
        ax.set_xlim(*x_bounds)
    if y_bounds is not None:
        ax.set_ylim(*y_bounds)
    ax.legend()


def _plot_comparison_parameters(ax, method_data, orders, dataset_label, method_name):
    params_dict = method_data['params'][dataset_label]
    x_positions, heights, colors, labels = [], [], [], []
    current_x = 0

    for order in orders:
        values = params_dict.get(order, [])
        if not values:
            continue
        for idx, val in enumerate(values):
            x_positions.append(current_x)
            heights.append(val)
            colors.append(ORDER_COLORS.get(order, 'gray'))
            labels.append(f'θ{idx}\nord {order}')
            current_x += 1
        current_x += 1  # spacing between orders

    if not x_positions:
        ax.text(0.5, 0.5, 'No parameters', ha='center', va='center')
        ax.axis('off')
        return

    ax.bar(x_positions, heights, color=colors, alpha=0.7)
    ax.set_xticks(x_positions)
    ax.set_xticklabels(labels, rotation=45, ha='right', fontsize=8)
    ax.set_ylabel('Parameter values')
    ax.set_title(f'{method_name} • Parameters {dataset_label}')
    ax.grid(True, alpha=0.3, axis='y')

    legend_handles = [
        plt.Rectangle((0, 0), 1, 1, color=ORDER_COLORS.get(order, 'gray'), alpha=0.7, label=f'Order {order}')
        for order in orders if order in params_dict
    ]
    if legend_handles:
        ax.legend(handles=legend_handles, loc='upper right')

def plotComparisonFigure(filepath, title, output_path=None):
    comparison = comparisonFileReader(filepath)
    data = comparison['data']
    methods = list(comparison['methods'].items())
    orders = comparison['orders']

    if len(methods) != 2:
        raise ValueError(f"Expected exactly two methods in comparison file, found {len(methods)}")

    x_train = data['x']
    y_train_A = data['datapointsA']
    y_train_B = data['datapointsB']

    if x_train.size > 0:
        x_min, x_max = x_train.min(), x_train.max()
        x_padding = (x_max - x_min) * 0.1 if x_max != x_min else 0.1
        x_bounds = (x_min - x_padding, x_max + x_padding)
    else:
        x_bounds = None

    def _compute_bounds(values):
        if values.size == 0:
            return None
        y_min, y_max = values.min(), values.max()
        padding = (y_max - y_min) * 0.15 if y_max != y_min else 0.1
        return (y_min - padding, y_max + padding)

    yA_bounds = _compute_bounds(y_train_A)
    yB_bounds = _compute_bounds(y_train_B)

    fig, axes = plt.subplots(4, 2, figsize=(18, 24))

    for idx, (method_name, method_data) in enumerate(methods):
        row_offset = idx * 2
        _plot_comparison_fit(axes[row_offset, 0], x_train, y_train_A, method_data, orders, 'A', method_name, x_bounds, yA_bounds)
        _plot_comparison_fit(axes[row_offset, 1], x_train, y_train_B, method_data, orders, 'B', method_name, x_bounds, yB_bounds)
        _plot_comparison_parameters(axes[row_offset + 1, 0], method_data, orders, 'A', method_name)
        _plot_comparison_parameters(axes[row_offset + 1, 1], method_data, orders, 'B', method_name)

    fig.suptitle(title, fontsize=18)
    fig.tight_layout(rect=[0, 0, 1, 0.97])

    if output_path:
        plt.savefig(output_path, dpi=300, bbox_inches='tight')

    plt.show()

def comparisonPlotter():
    """Generate comparison plots for GD vs SGD using exPointFive outputs."""
    comparison_cases = [
        ('gd_vs_sgd_fullbatch.txt', 'GD vs SGD (full batch)', 'gd_vs_sgd_fullbatch.png'),
        ('gd_vs_sgd_minibatch2.txt', 'GD vs SGD (mini-batch = 2)', 'gd_vs_sgd_minibatch2.png')
    ]

    for filepath, title, output_path in comparison_cases:
        if not os.path.exists(filepath):
            print(f"Warning: {filepath} not found. Run exPointFive() to generate it.")
            continue
        plotComparisonFigure(filepath, title, output_path)

if __name__ == "__main__":
    comparisonPlotter()